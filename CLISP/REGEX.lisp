(defun deltil(exp)
    (cond
        ((null exp) nil)
        ((eq '\| (car exp)) (cdr exp))
        (T (deltil (cdr exp)))
    )
)
(defun gettil(exp)
    (cond
        ((null exp) nil)
        ((eq '\| (car exp)) nil)
        (T (cons (car exp) (gettil (cdr exp))))
    )
)
(defun paral (exp)
    (cond
        ((null exp) nil)
        (T (cons (gettil exp) (paral (deltil exp))))
    )
)
;--------------------------------------------------------------------------------------------------------------------------
(defun makeauto(node1 symbol node2)
    (cond
        ((eq nil node2) (list node1 symbol))
        (T (list node1 symbol node2))
    )
)
(defun iteration (iter nodenum val)
    (cond
        ((null iter) (list (makeauto nodenum val (+ 1 nodenum))))
        ((eq '+ iter) (append (list (makeauto nodenum val (+ 1 nodenum))) (list (makeauto (+ 1 nodenum) val (+ 1 nodenum)))))
        ((eq '* iter) (append (list (makeauto nodenum val nodenum)) (list (makeauto nodenum 'eps (+ 1 nodenum)))))
        (T nil)
    )
)
(defun ifchar(exp nodenum)
    (cond
        ((null exp)nil)
        ((characterp (cadr exp)) (append (list (makeauto nodenum (car exp) (+ 1 nodenum))) (ifchar (cdr exp) (+ 1 nodenum))))
        (T (append (iteration (cadr exp) nodenum (car exp)) (ifchar (cddr exp) (+ 1 nodenum))))
    )
)
(defun ifcharfirst(exp nodenum)
    (cond
        ((null exp)nil)
        ((characterp (cadr exp)) (append (list (makeauto 0 (car exp) (+ 1 nodenum))) (ifchar (cdr exp) (+ 1 nodenum))))
        (T (append (iteration (cadr exp) nodenum (car exp)) (ifchar (cddr exp) (+ 1 nodenum))))
    )
)
(defun start (exp nodenum)
    (cond
        ((null exp) nil)
        (T (append (ifcharfirst (car exp) nodenum) (start (cdr exp) (+ 100 nodenum))))
    )
)

(defun getvalue(automate)
    (cadr automate)
)
(defun getfirstnode(exp)
    (car exp)
)
(defun getlastnode(exp)
    (caddr exp)
)
(defun deleps(automate)
    (cond
        ((null (cdr automate)) (list (car automate)))
        (T (list (makeauto (getfirstnode (car automate)) (getvalue (cadr automate)) (getlastnode (cadr automate)))))
    )
)

(defun determinate (automate)
    (cond
        ((null automate) nil)
        ((eq 'eps (getvalue (car automate))) (append (deleps automate) (determinate (cddr automate))))
        (T (append (list (car automate)) (determinate (cdr automate))))
    )
)
;--------------------------------------------------------------------------------------------------------------------------
(defun regex(expression)
    (determinate (start (paral expression) 0))
)

(print (regex '(#\a + #\b \| #\a #\b * #\a)))
